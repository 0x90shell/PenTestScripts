#!/usr/bin/env python

# Script for interacting with Shodan's API and searching it.

import argparse
from netaddr import IPNetwork
import os
import re
import shodan
import sys


def cli_parser():

    # Command line argument parser
    parser = argparse.ArgumentParser(
        add_help=False,
        description="ShodanSearch is a tool for searching shodan via its API.")
    parser.add_argument(
        "-search", metavar="Apache server", default=False,
        help="Use this when searching Shodan for a string.")
    parser.add_argument(
        "-ip", metavar='192.168.1.1', default=False,
        help="Used to return results from Shodan about a specific IP.")
    parser.add_argument(
        "-cidr", metavar='192.168.1.0/24', default=False,
        help="Used to return results from Shodan about a specific CIDR range.")
    parser.add_argument(
        '-h', '-?', '--h', '-help', '--help', action="store_true",
        help=argparse.SUPPRESS)
    args = parser.parse_args()

    if args.h:
        parser.print_help()
        sys.exit()

    return args.search, args.ip, args.cidr


def create_shodan_object():
    # Add your shodan API key here
    api_key = "INSERTSHODANAPIKEYHERE"

    shodan_object = shodan.WebAPI(api_key)

    return shodan_object


def shodan_cidr_search(shodan_search_object, shodan_search_cidr):

    title()

    if not validate_cidr(shodan_search_cidr):
        print "[*] ERROR: Please provide valid CIDR notation!"
        sys.exit()

    else:

        print "[*] Searching Shodan for info about " + shodan_search_cidr

        # Create cidr notated list
        network = IPNetwork(shodan_search_cidr)

        # search shodan for each IP
        for ip in network:

            print "\n[*] Searching specifically for: " + str(ip)

            try:
                # Search Shodan
                result = shodan_search_object.host(ip)

                # Display basic info of result
                print "\n*** RESULT ***"
                print "IP: " + result['ip']
                print "Country: " + result['country_name']
                if result['city'] is not None:
                    print "City: " + result['city']
                print "\n"

                # Loop through other info
                for item in result['data']:
                    print "Port: " + str(item['port'])
                    print "Banner: " + item['banner']

            except Exception, e:
                if str(e).strip() == "API access denied":
                    print "You provided an invalid API Key!"
                    print "Please provide a valid API Key and re-run!"
                    sys.exit()
                elif str(e).strip() == "No information available for that IP.":
                    print "No information is available for " + str(ip)
                else:
                    print "[*]Unknown Error: " + str(e)


def shodan_ip_search(shodan_search_object, shodan_search_ip):

    title()

    if validate_ip(shodan_search_ip):

        print "[*] Searching Shodan for info about " + shodan_search_ip + "..."

        try:
            # Search Shodan
            result = shodan_search_object.host(shodan_search_ip)

            # Display basic info of result
            print "\n*** RESULT ***"
            print "IP: " + result['ip']
            print "Country: " + result['country_name']
            if result['city'] is not None:
                print "City: " + result['city']
            print "\n"

            # Loop through other info
            for item in result['data']:
                print "Port: " + str(item['port'])
                print "Banner: " + item['banner']

        except Exception, e:
                if str(e).strip() == "API access denied":
                    print "You provided an invalid API Key!"
                    print "Please provide a valid API Key and re-run!"
                    sys.exit()
                elif str(e).strip() == "No information available for that IP.":
                    print "No information on Shodan about " + str(shodan_search_ip)
                else:
                    print "[*]Unknown Error: " + str(e)

    else:
        print "[*]ERROR: You provided an invalid IP address!"
        print "[*]ERROR: Please re-run and provide a valid IP."
        sys.exit()


def shodan_string_search(shodan_search_object, shodan_search_string):

    title()

    # Try/catch for searching the shodan api
    print "[*] Searching Shodan...\n"

    try:
        # Time to search Shodan
        results = shodan_search_object.search(shodan_search_string)

        print "Total number of results back: " + str(results['total']) + "\n"

        for result in results['matches']:
            print "*** RESULT ***"
            print "IP Address: " + result['ip']
            print "Country: " + result['country_name']
            print "Data: " + result['data']
            for item in result['hostnames']:
                print "Hostname: " + item
            print

    except Exception, e:
        if str(e).strip() == "API access denied":
            print "You provided an invalid API Key!"
            print "Please provide a valid API Key and re-run!"
            sys.exit()


def title():
    os.system('clear')
    print "################################################################"
    print "#                    Shodan Search                             #"
    print "################################################################\n"

    return


def validate_cidr(val_cidr):
    # This came from (Mult-line link for pep8 compliance)
    # http://python-iptools.googlecode.com/svn-history/r4
    # /trunk/iptools/__init__.py
    cidr_re = re.compile(r'^(\d{1,3}\.){0,3}\d{1,3}/\d{1,2}$')
    if cidr_re.match(val_cidr):
        ip, mask = val_cidr.split('/')
        if validate_ip(ip):
            if int(mask) > 32:
                return False
        else:
            return False
        return True
    return False


def validate_ip(val_ip):
    # This came from (Mult-line link for pep8 compliance)
    # http://python-iptools.googlecode.com/svn-history/r4
    # /trunk/iptools/__init__.py
    ip_re = re.compile(r'^(\d{1,3}\.){0,3}\d{1,3}$')
    if ip_re.match(val_ip):
        quads = (int(q) for q in val_ip.split('.'))
        for q in quads:
            if q > 255:
                return False
        return True
    return False


if __name__ == '__main__':

    # Parse command line options
    search_string, search_ip, search_cidr = cli_parser()

    # Create object used to search Shodan
    shodan_api_object = create_shodan_object()

    # Determine which action will be performed
    if search_string is not False:
        shodan_string_search(shodan_api_object, search_string)

    elif search_ip is not False:
        shodan_ip_search(shodan_api_object, search_ip)

    elif search_cidr is not False:
        shodan_cidr_search(shodan_api_object, search_cidr)

    else:
        print "You didn't provide a valid option!"
